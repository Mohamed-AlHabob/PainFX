version: '3.8'

services:
  traefik:
    image: traefik:v3.1
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api=true"
      - "--api.dashboard=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=your-email@domain.com" # Replace with your email
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik dashboard
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik_letsencrypt:/letsencrypt
    networks:
      - mynetwork

  backend:
    build:
      context: ./backend
    container_name: painfx_backend
    env_file: .env
    ports:
      - "8000:8000" # Optional: Only if you need direct access; otherwise, remove
    depends_on:
      - db
      - redis
    networks:
      - mynetwork
    volumes:
      - ./backend:/app:z
      - ./staticfiles:/app/staticfiles:z
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.backend.rule=Host(`api.painfx.in`)"
      - "traefik.http.routers.backend.entrypoints=websecure"
      - "traefik.http.routers.backend.tls=true"
      - "traefik.http.routers.backend.tls.certresolver=myresolver"
      - "traefik.http.services.backend.loadbalancer.server.port=8000"

  celery:
    build:
      context: ./backend
      dockerfile: ../infrastructure/celery/celery-flower/Dockerfile
    container_name: painfx_celery
    env_file: .env
    depends_on:
      - db
      - redis
      - backend
    networks:
      - mynetwork
    volumes:
      - ./backend:/app:z
    command: ["celery", "-A", "core", "worker", "--loglevel=info"]
    labels:
      - "traefik.enable=false"

  celery-flower:
    build:
      context: ./backend
      dockerfile: ../infrastructure/celery/celery-flower/Dockerfile
    container_name: painfx_celery_flower
    env_file: .env
    ports:
      - "5555:5555" # Optional: Only if you need direct access; otherwise, remove
    depends_on:
      - redis
      - backend
      - celery
    networks:
      - mynetwork
    volumes:
      - ./backend:/app:z
    command: ["celery", "-A", "core", "flower", "--port=5555", "--loglevel=info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.celeryflower.rule=Host(`flower.painfx.in`)"
      - "traefik.http.routers.celeryflower.entrypoints=websecure"
      - "traefik.http.routers.celeryflower.tls=true"
      - "traefik.http.routers.celeryflower.tls.certresolver=myresolver"
      - "traefik.http.services.celeryflower.loadbalancer.server.port=5555"

  redis:
    image: redis:latest
    container_name: painfx_redis
    networks:
      - mynetwork
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=false"

  db:
    image: postgres:latest
    container_name: painfx_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Optional: Only if you need direct access; otherwise, remove
    networks:
      - mynetwork
    volumes:
      - postgres_data:/var/lib/postgresql/data:z
    labels:
      - "traefik.enable=false"

  frontend:
    build:
      context: ../Full_Frontend
    container_name: authen_frontend
    env_file: ../Full_Frontend/.env.production
    ports:
      - "3000:3000" # Optional: Only if you need direct access; otherwise, remove
    networks:
      - mynetwork
    volumes:
      - ../Full_Frontend:/app
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`painfx.in`)"
      - "traefik.http.routers.frontend.entrypoints=websecure"
      - "traefik.http.routers.frontend.tls=true"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

  watchtower:
    image: containrrr/watchtower:latest
    container_name: watchtower
    restart: unless-stopped
    environment:
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=300
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - mynetwork

networks:
  mynetwork:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  traefik_letsencrypt:
